função fibonacci_dc(n):
    se n <= 1:
        retornar n
    senão:
        retornar fibonacci_dc(n - 1) + fibonacci_dc(n - 2)

função fibonacci_top_down(n, memo = {}):
    se n <= 1:
        retornar n
    senão, se n não estiver em memo:
        memo[n] = fibonacci_top_down(n - 1, memo) + fibonacci_top_down(n - 2, memo)
    retornar memo[n]

função fibonacci_bottom_up(n):
    se n <= 1:
        retornar n
    fib = array preenchido com 0 de tamanho n + 1
    fib[1] = 1
    para i de 2 até n:
        fib[i] = fib[i - 1] + fib[i - 2]
    retornar fib[n]

função principal():
    n = parseInt(prompt("Digite um número inteiro não-negativo:"))

    resultado_dc = fibonacci_dc(n)
    exibir "Algoritmo de Divisão e Conquista: O", n, "-ésimo termo na sequência de Fibonacci é:", resultado_dc

    resultado_top_down = fibonacci_top_down(n)
    exibir "Algoritmo de Programação Dinâmica (Top-Down): O", n, "-ésimo termo na sequência de Fibonacci é:", resultado_top_down

    resultado_bottom_up = fibonacci_bottom_up(n)
    exibir "Algoritmo de Programação Dinâmica (Bottom-Up): O", n, "-ésimo termo na sequência de Fibonacci é:", resultado_bottom_up
